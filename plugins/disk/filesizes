#!/usr/bin/perl
# -*-  perl -*-
#
#
##############################################################################
#
#
# This munin plugin watches the sizes of the given files.
# @author Hugo Geoffroy (original from Kevin Fischer)
# @version 2013/10/18
# @website http://pstch.net/
#
# Copy this to your node's config file (default: plugin-conf.d/munin-node):
#  [filesizes]
#  user root
#  env.watchfiles /var/log/syslog,/var/mail/root,/foo/bar
#
# Change the env.watchfiles-variable according to your wishes.
# DONT FORGET TO RUN AS ROOT!
#
# You can test this plugin by calling it with params "test" and your  watchfiles:
# ./filesizes test /file1,/tmp/file2
#
#
##############################################################################
#

use strict;
my @watchfiles;

if ( exists $ARGV[0] and $ARGV[0] eq "test" ) {

    # Split the watchfiles string
    @watchfiles = split( ",", $ARGV[1] );
}
else {

    # If no files are given, exit.
    if ( !defined( $ENV{"watchfiles"} ) ) {
        die "No files given! See the manual at top of this plugin file.";
    }

    # Split the watchfiles string
    @watchfiles = split( ",", $ENV{"watchfiles"} );
}

# Config or read request?
if ( exists $ARGV[0] and $ARGV[0] eq "config" ) {

    # Munin basic info
    print "graph_title File sizes\n";
    print "graph_args --base 1024 --lower-limit 0\n";
    print "graph_vlabel file size\n";
    print "graph_info Displays the sizes of all configured files.\n";
    print "graph_category disk\n";
    print "graph_total Total\n";

    # All available files
    foreach my $file (@watchfiles) {

        # Remove illegal characters
        my $label = $file;
        $label =~ s@[\/-]@_@g;

        # Print name
        print "file", $label, ".label ", $file, "\n";
    }
}

# Read request, output the file sizes
else {

    # All available files
    foreach my $file (@watchfiles) {

        # Remove illegal characters
        my $label = $file;
        $label =~ s@[\/-]@_@g;

        # Get the filesize
        my $filesize = getSize($file);

        # Get the label
        my $label = niceLabelname($file);

        # Print name
        print "file", $label, ".value ", $filesize, ".0\n";
    }
}

# Function: getSize($file)
sub getSize {
    my ($file) = @_;

    # Get the size via `du`
    my @filesize = split( ' ', `du -cb $file | grep "total" |  tail -1 ` );
    return @filesize[0];
}

# Remove illegal characters
sub niceLabelname {
    my ($label) = @_;

    $label =~ s@[\/-]@_@g;
    return $label;
}

exit 0;

